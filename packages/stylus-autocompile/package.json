{
  "_args": [
    [
      {
        "raw": "/private/var/folders/b0/xk7csyz11618w9mz06zrb_2c0000gn/T/d-117231-7565-80ebtv/package.tgz",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/private/var/folders/b0/xk7csyz11618w9mz06zrb_2c0000gn/T/d-117231-7565-80ebtv/package.tgz",
        "spec": "/private/var/folders/b0/xk7csyz11618w9mz06zrb_2c0000gn/T/d-117231-7565-80ebtv/package.tgz",
        "type": "local"
      },
      "/private/var/folders/b0/xk7csyz11618w9mz06zrb_2c0000gn/T/apm-install-dir-117231-7565-rqz70q"
    ]
  ],
  "_from": "../d-117231-7565-80ebtv/package.tgz",
  "_id": "stylus-autocompile@0.6.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/stylus-autocompile",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/private/var/folders/b0/xk7csyz11618w9mz06zrb_2c0000gn/T/d-117231-7565-80ebtv/package.tgz",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/private/var/folders/b0/xk7csyz11618w9mz06zrb_2c0000gn/T/d-117231-7565-80ebtv/package.tgz",
    "spec": "/private/var/folders/b0/xk7csyz11618w9mz06zrb_2c0000gn/T/d-117231-7565-80ebtv/package.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:../d-117231-7565-80ebtv/package.tgz",
  "_shasum": "1d645be2be4c30ab3cb47d8edf88c3c7a88ca120",
  "_shrinkwrap": null,
  "_spec": "/private/var/folders/b0/xk7csyz11618w9mz06zrb_2c0000gn/T/d-117231-7565-80ebtv/package.tgz",
  "_where": "/private/var/folders/b0/xk7csyz11618w9mz06zrb_2c0000gn/T/apm-install-dir-117231-7565-rqz70q",
  "activationCommands": {
    "atom-text-editor[data-grammar~=\"source\"][data-grammar~=\"stylus\"]": [
      "core:save"
    ]
  },
  "bugs": {
    "url": "https://github.com/olmokramer/atom-stylus-autocompile/issues"
  },
  "consumedServices": {
    "status-bar": {
      "versions": {
        "^1.0.0": "consumeStatusBar"
      }
    }
  },
  "dependencies": {
    "mkdirp": "^0.5.1",
    "resolve": "^1.1.7",
    "stylus": "^0.54.2"
  },
  "description": "Auto compile Stylus.",
  "devDependencies": {
    "eslint": "^2.7.0",
    "jeet": "^6.1.2",
    "nib": "^1.1.0"
  },
  "engines": {
    "atom": ">0.50.0"
  },
  "homepage": "https://github.com/olmokramer/atom-stylus-autocompile#readme",
  "license": "MIT",
  "main": "./lib/stylus-autocompile",
  "name": "stylus-autocompile",
  "optionalDependencies": {},
  "readme": "# stylus-autocompile\n\nAuto compile Stylus file on save. Fork of [less-autocompile](https://github.com/lohek/less-autocompile)\n\nAdd the parameters on the first line of the Stylus file.\n\n| param | type | description |\n| --- | --- | --- |\n| out <sup><a id=\"ref-1\" href=\"#note-1\">1</a> <a id=\"ref-2\" href=\"#note-2\">2</a></sup> | string | path of css file to create |\n| compress <sup><a id=\"ref-3\" href=\"#note-3\">3</a></sup> | bool | compress css file |\n| sourcemap <sup><a href=\"#note-3\">3</a></sup> | bool | create a sourcemap for this file |\n| libs <sup><a href=\"#note-3\">3</a></sup> | array | space-separated list of libraries to include. the specified libraries must be installed in the (parent) directory of the stylus file |\n| main <sup><a href=\"#note-1\">1</a></sup> | string | path to the main stylus file to be compiled |\n\n<sup><a id=\"note-1\" href=\"#ref-1\">1</a></sup> The paths are relative to the stylus file. If both an `out` and a `main` field are specified, both the current file and the main file are compiled and stored in their respective `out`\n\n<sup><a id=\"note-2\" href=\"#ref-2\">2</a></sup> The output filename may contain `$1` or `$2`, which will be replaced by the input basename and extension, respectively. So a file named `in.styl` and is configured with `# out: $1.$2.css` will compile to `in.styl.css`.\n\n<sup><a id=\"note-3\" href=\"#ref-3\">3</a></sup> The `compress`, `sourcemap` and `libs` fields don't have any effect when no `out` field is specified.\n\nIf stylus is installed locally in the project of the current file, that version will be used. Otherwise Stylus autocompile falls back to a bundled version of stylus.\n\n## Example\n\nmain.styl\n\n```stylus\n// out: css/style.css, sourcemap: true, compress: true, libs: nib\n\n@import \"component.styl\";\n@import \"other.styl\";\n@import \"nib/gradients\";\n```\n\nWhen saving `main.styl`, `main.styl` will be compiled, compressed and saved as `css/style.css` (relative to `main.styl`), along with a sourcemap `css/style.css.map`. The `nib` library is available for `@import`s in `main.styl`.\n\ncomponent.styl\n\n```stylus\n// main: main.styl, out: css/component.css\n\nmy-component {\n  height: 100px;\n  width: 100px;\n}\n```\n\nWhen saving `component.styl`, both `main.styl` and `component.styl` are compiled to `css/style.css` and `css/component.css`, respectively.\n\nother.styl\n\n```stylus\n// main: component.styl\n\nother-component {\n  height: 50px;\n}\n```\n\nWhen `other.styl` is saved `main.styl` and `component.styl` will be compiled to `css/style.css` and `css/component.css`, respectively.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/olmokramer/atom-stylus-autocompile.git"
  },
  "version": "0.6.1"
}
