/* globals io */
import Service from '@ember/service';
import { inject as service } from '@ember/service';
import { debug } from '@ember/debug';
import config from 'nela-talk/config/environment';

const {
  APP: {
    version
  }
} = config;

export default Service.extend({
  chatService: service(),
  notification: service(),
  session: service(),
  store: service(),

  authenticateSocket() {
    io.socket.request({
      method: 'post',
      url: '/socketlogin',
      data: {
        origin: 'nela-talk-desktop',
        version: version.split('+')[0]
      },
      headers: this.session.authorizationBearer
    }, function(response) {
      debug(`Socket login: ${response}`);
    });
  },

  initSocketListeners() {
    io.socket.on('needsAuthentication', () => {
      debug(`*** Pediu autenticação ***`);
      this.authenticateSocket();
    });

    io.socket.on('chatmessage', (body) => {
      let currentChat = this.get('chatService.currentChat.open') || {};
      let chatMessage = body.chatMessage;

      debug(`No momento falando com: ${currentChat.with} ${currentChat.name}`);
      debug(`Recebendo mensagem de chat do usuario ${chatMessage.from}`);

      if (chatMessage.userGroup) {
        debug(`Grupo: ${chatMessage.userGroup}`);
      }

      this.chatService.addIncomingMessage(chatMessage);

      if (currentChat.type === 'direct' && chatMessage.type === 'direct' && chatMessage.from == currentChat.with) {
        debug(`Mensagem DIRECT Message: ${chatMessage}`);
        this.chatService.setAsRead(chatMessage.from);
      }

      if (currentChat.type === 'group' && (chatMessage.type === 'group' || chatMessage.type === 'system') &&
        chatMessage.userGroup == currentChat.with) {
        debug(`GROUP Message: ${body.chatMessage}`);
        this.chatService.setAsRead(currentChat.with, 'group');
      }
    });

    io.socket.on('openChat', (body) => {
      debug('Received OpenChat');
      debug(body);

      this.notification.showNotification(body);
    });
  },
});
